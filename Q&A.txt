

1. FLUX 패턴에 대하여 설명해보세요
    : 단방향 데이터 흐름으로 애플리케이션을 만드는 아키텍쳐 패턴이다.
      이 패턴은 웹앱 구조가 복잡해짐에 따라 MVC 패턴(양방향 흐름)으로는 에러와 데이터 추적이 어려운 한계가 있었기 때문에 데이터 흐름의 복잡도를 줄이기 위해 페이스북 meta 팀에서 만든 패턴이다.
    action - dispatcher - model - view의 방향으로 흐르는데,

    1) action은 *데이터를 생성, 변경*하는 행위로, type과 payload값을 가진다.
    type은 데이터가 어떤 타입인지 알수있는 key이고,
    payload는 dispatcher를 통해 store에 전달할 실질 데이터라고 할 수 있다.

    2) dispatcher는 모든 데이터의 흐름을 관리하는 허브이자 *전달* 매개체이다.
    dispatcher에는 store들이 등록해놓은 action type 마다 callback 함수가 존재한다. action에 전달하여 store의 callback 함수를 실행하게 된다.

    3) store는 쉽게 말해 *저장고*이다. *전역*으로 사용 가능한 데이터 및 데이터 변경 로직이 저장된다.

    4) view는 화면 UI(User Interface)이다. store에서 변경된 데이터를 가져와 화면에 보여준다. 화면에 나타내는 것뿐 아닌 데이터 가공, 자식 컴포넌트로 데이터를 전달하는 Controller의 역할도 하고있다.

2. 아래의 hook 함수는 각각 어느 순간에 사용할까요
    (1) useReducer
        : state 업데이트 로직을 외부 파일로 빼내어 재사용하기 위해 사용.(함수를 모듈화하여 사용할 때) 재사용성, 유지보수에 뛰어남
    (2) useContext
        : 전역 상태를 관리할 때. 컴포넌트 트리 전체에서 전역으로 데이터를 사용할 때.

3. 전역 상태 관리를 해야하는 이유는 무엇일까요
    일반적으로 부모에서 자식으로 상태를 전달할 때 props를 통하여 전달하게 되는데(props drilling), 이 때 컴포넌트의 깊이가 깊어질수록 상태를 몰라도 되는 컴포넌트에도 props의 전달이 이루어진다. 코드를 반복 작성해야하거나 props의 추적이 어렵고, 하나의 컴포넌트에서 수정이 있을 때 모든 컴포넌트를 전부 수정해야하는 등 비효율적인 상황이 발생할 수 있다. 
    Context로 전역 상태를 관리한다면 중간 컴포넌트에 props를 전달하지 않아도 데이터가 필요한 컴포넌트에만 상태를 바로 전달하여 사용할 수 있어 효율적이라고 할 수 있다.

4. 그렇다면 전역 상태 관리는 위 조건에만 부합하면 반드시 수행하는 것이 좋을까요?
   전역 상태 관리를 통해 얻을 수 있는 장단점에 관하여 토의해보세요

   - props의 전달이 불필요한(부모가 상태를 몰라도 될 때) context를 사용하면 컴포넌트에 props를 전달하지 않아도 되므로 데이터가 필요한 컴포넌트에 상태를 바로 전달하여 사용할 수 있는 장점이 있으나, context store에 값을 저장하는 cost가 부담되는 문제가 생기므로 props drillig이 일어나는가? 부모가 몰라도 되는 상태인가? 등의 상황에 따라 사용을 고려해볼 필요가 있다.