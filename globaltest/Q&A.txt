1. FLUX 패턴에 대하여 설명해보세요

Flux란 단방형 데이터 흐름을 가지는 패턴이다. 총 4가지 단계로 이루어진다.

[Action] : 애플리케이션에서 일어나는 이벤트를 나타내는 '객체'
[Dispatcher] : Action을 받아서 Store에 전달하는 역할
[Store] : 애플리케이션의 모든 상태와 로직을 가지고 있는 저장소
[View] : view-controller

이 4개의 단계가 Action => Dispatcher => Store => 
View 의 단계로 단방향으로 이루어진다. 이를 사용할 수 있는것이 useReducer이다. 

Flux는 MVC 모델의 단점을 보안하기 위해 만든 페이스북에서 발표한 패턴(pattern)입니다.
React, Redux의 디자인 패턴이기도 합니다.

2. 아래의 hook 함수는 각각 어느 순간에 사용할까요

    (1) useReducer

    useReducer는 flux기법의 상태 업데이트 로직이다.
    useReducer란 상태 업데이트 로직을 다른 파일에 분리하는 것이다.
     즉, state를 변경하는 로직이 반복된다면. 이를 useReducer를 사용해 함수
     형태의 로직을 모듈화해서 재사용할 수 있다.
     

    (2) useContext

    useContext는 전역 상태 관리에 관한 로직이다.
    보통은 전역 상태이기 때문에 업데이트 로직을 재사용할 수 있는 reducer와 함께 쓰인다.
    프론트엔드의 의존성주입(DI)에 응용이 가능하다.


3. 전역 상태 관리를 해야하는 이유는 무엇일까요

 코드가 늘어나고 그에 따라 컴포넌트가 분리되어 점점 더 많아지는
  컴포넌트에서 상태를 관리하기 위해서는 결국 props를 사용하여 
  계속 하위 컴포넌트로 값을 전달해줘야하는 상황이 발생하게 될 것이다.
  이 과정에서 일부 컴포넌트는 하위 컴포넌트에 props를 전달해주기 위해 
  불필요한 props를 전달받아야 하는 상황인 Prop Drilling이라는 문제가 발생하게 된다
  이를 방지하기 위해 모든 파일에서 전역적으로 사용해야 하는 상태를 'redux, recoil, 
  useContext'같은 전역 상태 라이브러리로 관리하게 된다.

4. 그렇다면 전역 상태 관리는 위 조건에만 부합하면 반드시 수행하는 것이 좋을까요?
   전역 상태 관리를 통해 얻을 수 있는 장단점에 관하여 토의해보세요

   전역상태로 관리하게 되면 props로 전달하지 않아도 provider 하의 모든 파일에서 
   해당 상태를 구독할 수 있다는 장점이 있다. 또한 reducer와 같이 활용하면 비즈니스
   로직을 ui와 분리할 수 있다는 장점이 있다. 하지만 다른 파일로 관리한다는 것은 cost가
   들기 때문에, 꼭 전역적으로 필요한지를 판단하여 전역상태로 관리하는 것이 적절하다. 

  장점
   1. 상태 예측 가능
   2. 유지 보수가 용이하다
   3. 디버깅이 쉽다
   4. 한 곳에서 관리

  단점 
   1. 코드의 증량
   2. 읽기전용
   3. 컴포넌트와 연결성
